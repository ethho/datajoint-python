# PY_VER=3.8 MYSQL_VER=5.7 DISTRO=alpine MINIO_VER=RELEASE.2022-08-11T04-37-28Z HOST_UID=$(id -u) docker compose -f LNX-docker-compose.yml up --exit-code-from app --build
version: "2.4"
x-net:
  &net
  networks:
    - main
services:
  db:
    <<: *net
    image: datajoint/mysql:${MYSQL_VER:-8.0}
    environment:
      - MYSQL_ROOT_PASSWORD=${DJ_PASS:-password}
    command: mysqld --default-authentication-plugin=mysql_native_password
    # ports:
    #   - "3306:3306"
    # volumes:
    #   - ./mysql/data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 30s
      retries: 5
      interval: 15s
  minio:
    <<: *net
    image: minio/minio:${MINIO_VER:-RELEASE.2022-08-11T04-37-28Z}
    environment:
      - MINIO_ACCESS_KEY=datajoint
      - MINIO_SECRET_KEY=datajoint
    # ports:
    #   - "9000:9000"
    # volumes:
    #   - ./minio/config:/root/.minio
    #   - ./minio/data:/data
    command: server --address ":9000" /data
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://minio:9000/minio/health/live"
        ]
      timeout: 30s
      retries: 5
      interval: 15s
  fakeservices.datajoint.io:
    <<: *net
    image: datajoint/nginx:v0.2.7
    environment:
      - ADD_db_TYPE=DATABASE
      - ADD_db_ENDPOINT=db:3306
      - ADD_minio_TYPE=MINIO
      - ADD_minio_ENDPOINT=minio:9000
      - ADD_minio_PORT=80 # allow unencrypted connections
      - ADD_minio_PREFIX=/datajoint
    ports:
      - "3306:3306"
      # - "80:80"
      # - "443:443"
  app:
    <<: *net
    image: datajoint/djtest:py${PY_VER:-3.8}-${DISTRO:-alpine}
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      fakeservices.datajoint.io:
        condition: service_healthy
    environment:
      - DJ_HOST=fakeservices.datajoint.io
      - DJ_USER=root
      - DJ_PASS=password
      - DJ_TEST_HOST=fakeservices.datajoint.io
      - DJ_TEST_USER=datajoint
      - DJ_TEST_PASSWORD=datajoint
      - S3_ENDPOINT=fakeservices.datajoint.io
      - S3_ACCESS_KEY=datajoint
      - S3_SECRET_KEY=datajoint
      - S3_BUCKET=datajoint.test
      - PYTHON_USER=dja
      - JUPYTER_PASSWORD=datajoint
      - DISPLAY
    working_dir: /src
    command:
      - sh
      - -c
      - |
        set -e
        pip install -e .
        pip list --format=freeze | grep datajoint
        pytest tests/test_university.py::test_indefinite
    # ports:
    #   - "8888:8888"
    user: ${HOST_UID:-1000}:anaconda
    volumes:
      - .:/src
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      # - ./notebooks:/home/dja/notebooks
  rabbitmq:
    <<: *net
    image: rabbitmq:3-management
    hostname: rabbitmq-host
    ports:
      - 15672:15672 # prometheus metrics
    command: >
      bash -c "
        sleep 10;
        rabbitmq-plugins enable rabbitmq_management;
        rabbitmqadmin declare exchange name=my_stream type=topic;
        rabbitmqadmin declare exchange name=schema_changes type=topic;
        rabbitmqadmin declare exchange name=schema_changes.dj_university._letter_grade type=topic;
        rabbitmq-server
      "
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
        - ./rabbitmq/data/:/var/lib/rabbitmq/
        - ./rabbitmq/log/:/var/log/rabbitmq
  pre-deb-setup:
    <<: *net
    build:
      context: ./debezium-demo/pre-deb-setup/
      dockerfile: Dockerfile
    depends_on:
      fakeservices.datajoint.io:
        condition: service_started
      app:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    command: >
      bash -c """
        set -e;
        sleep 5;
        mysql -hfakeservices.datajoint.io -uroot -ppassword -e 'SHOW DATABASES;' | grep 'djtest_university';
        declare -a endpoints=("my_stream" "schema_changes" "schema_changes.djtest_university.department");
        for endpoint in "$${endpoints[@]}"; do
          curl -sf -u 'guest:guest' -H 'content-type:application/json' -XPUT -d'{\"type\":\"topic\",\"durable\":true}' "http://rabbitmq:15672/api/exchanges/%2f/$${endpoint}";
        done
        echo 'Finished pre Debezium setup';
      """
  debezium:
    <<: *net
    image: quay.io/debezium/server:${DEBEZIUM_VERSION:-2.3}
    ports:
      - "8080:8080"
    volumes:
      - ./debezium-config:/debezium/conf
    depends_on:
      pre-deb-setup:
        condition: service_completed_successfully


networks:
  main:
